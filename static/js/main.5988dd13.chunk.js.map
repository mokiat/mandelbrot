{"version":3,"sources":["Visualization/index.jsx","Visualization/Graphics/Surface.js","Visualization/Graphics/Color.js","Visualization/Mandelbrot/Complex.js","Visualization/Mandelbrot/Palette.js","Visualization/Mandelbrot/Eval.js","Visualization/Mandelbrot/Renderer.js","Application/index.jsx","Router/index.jsx","index.js"],"names":["ZOOM_MODES","Object","freeze","ZOOM_IN","ZOOM_OUT","SCAN_AREA_SIZE","nextArea","surface","previous","x","y","width","Math","min","getWidth","height","getHeight","areaX","areaY","calculateClippedViewport","area","viewport","left","top","prepareArea","renderer","renderArea","Visualization","className","pointerX","pointerY","pixelsPerUnit","onClick","canvasRef","useRef","useState","setSurface","unitWidth","unitHeight","useMemo","useEffect","Surface","current","useAsyncEffect","isMounted","a","Renderer","clippedViewport","swapBuffers","Promise","resolve","setImmediate","ref","e","preventDefault","rect","target","getBoundingClientRect","clientX","right","clientY","bottom","defaultProps","canvas","this","context","getContext","imageData","createImageData","pixels","Uint32Array","data","buffer","color","putImageData","rgb","red","green","blue","ComplexNumber","real","imaginary","value","other","getReal","getImaginary","newReal","newImaginary","createColor","iteration","colorAmount","threshold","gradient","sin","PI","evaluation","evalEscapeIteration","complex","iterations","setTo","i","getLengthSquared","square","inc","PREPARE_COLOR","palette","colors","push","createPalette","startX","startY","endX","endY","putPixel","startReal","startImaginary","deltaReal","deltaImabinary","complexNumber","setImaginary","setReal","escapeItration","Application","classes","onViewportChange","zoomMode","setZoomMode","AppBar","position","Toolbar","toolbar","Typography","variant","title","Link","href","rel","Container","container","maxWidth","Paper","paper","elevation","clsx","visualization","newPixelsPerUnit","overlay","ToggleButtonGroup","buttonGroup","size","exclusive","onChange","event","newZoomMode","ToggleButton","selected","withStyles","backgroundColor","flexGrow","textAlign","margin","padding","cursor","ApplicationWrapper","history","useHistory","fragment","URLSearchParams","useLocation","hash","substring","Number","get","ppu","newX","newY","newPPU","encX","encodeURIComponent","encY","encPPU","Router","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAWaA,EAAaC,OAAOC,OAAO,CACtCC,QAAS,UACTC,SAAU,aAGNC,EAAiB,GAMjBC,EAAW,SAACC,EAASC,GACzB,IAAKA,EACH,MAAO,CACLC,EAAG,EACHC,EAAG,EACHC,MAAOC,KAAKC,IAAIR,EAAgBE,EAAQO,YACxCC,OAAQH,KAAKC,IAAIR,EAAgBE,EAAQS,cAI7C,IAAIC,EAAQT,EAASC,EAAIJ,EACrBa,EAAQV,EAASE,EAKrB,OAJIO,GAASV,EAAQO,aACnBG,EAAQ,EACRC,GAASb,GAEPa,GAASX,EAAQS,YACZ,KAEF,CACLP,EAAGQ,EACHP,EAAGQ,EACHP,MAAOC,KAAKC,IAAIR,EAAgBE,EAAQO,WAAaG,GACrDF,OAAQH,KAAKC,IAAIR,EAAgBE,EAAQS,YAAcE,KAIrDC,EAA2B,SAACZ,EAASa,EAAMC,GAC/C,MAAO,CACLC,KAAMD,EAASC,KAAOD,EAASV,OAASS,EAAKX,EAAIF,EAAQO,YACzDS,IAAKF,EAASE,IAAMF,EAASN,QAAUK,EAAKV,EAAIH,EAAQS,aACxDL,MAAOU,EAASV,OAASS,EAAKT,MAAQJ,EAAQO,YAC9CC,OAAQM,EAASN,QAAUK,EAAKL,OAASR,EAAQS,eAI/CQ,EAAc,SAACC,EAAUL,GAC7BK,EAASD,YAAYJ,IAGjBM,EAAa,SAACD,EAAUL,EAAMC,GAClCI,EAASC,WAAWN,EAAMC,IAGtBM,EAAgB,SAAC,GAQhB,IAPLC,EAOI,EAPJA,UACAjB,EAMI,EANJA,MACAI,EAKI,EALJA,OACAc,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,cACAC,EACI,EADJA,QAEMC,EAAYC,iBAAO,MACzB,EAA8BC,mBAAS,MAAvC,mBAAO5B,EAAP,KAAgB6B,EAAhB,KAEMC,EAAY1B,EAAQoB,EACpBO,EAAavB,EAASgB,EAEtBV,EAAWkB,mBACf,iBAAO,CACLjB,KAAMO,EAAWQ,EAAY,EAC7Bd,IAAKO,EAAWQ,EAAa,EAC7B3B,MAAO0B,EACPtB,OAAQuB,KAEV,CAACT,EAAUC,EAAUO,EAAWC,IAGlCE,qBAAU,WACRJ,EAAW,IAAIK,IAAQR,EAAUS,YAChC,CAAC/B,EAAOI,IAEX4B,IAAc,uCACZ,WAAOC,GAAP,mBAAAC,EAAA,yDACOtC,EADP,iDAKQkB,EAAW,IAAIqB,IAASvC,GAE1Ba,EAAOd,EAASC,EAAS,MAP/B,WAQSa,IAAQwB,IARjB,wBASUG,EAAkB5B,EACtBZ,EACAa,EACAC,GAEFK,EAAWD,EAAUL,EAAM2B,IAE3B3B,EAAOd,EAASC,EAASa,KAEvBI,EAAYC,EAAUL,GAGxBb,EAAQyC,cArBZ,UA7EK,IAAIC,SAAQ,SAACC,GAAD,OAAaC,GAAa,kBAAMD,UA6EjD,mEADY,sDA4BZ,CAAC3C,EAASc,IAgBZ,OACE,wBACE+B,IAAKnB,EACLL,UAAWA,EACXjB,MAAOA,EACPI,OAAQA,EACRiB,QAnBgB,SAACqB,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OAAOC,wBAChBhD,GAAK4C,EAAEK,QAAUH,EAAKjC,OAASiC,EAAKI,MAAQJ,EAAKjC,MACjDZ,GAAK2C,EAAEO,QAAUL,EAAKhC,MAAQgC,EAAKM,OAASN,EAAKhC,KAEvDS,EACEX,EAASC,KAAOb,EAAIY,EAASV,MAC7BU,EAASE,IAAMb,EAAIW,EAASN,YAwBlCY,EAAcmC,aAAe,CAC3B9B,QAAS,cAGIL,Q,qHCnKMc,E,WACnB,WAAYsB,GAAS,oBACnBC,KAAKrD,MAAQoD,EAAOpD,MACpBqD,KAAKjD,OAASgD,EAAOhD,OACrBiD,KAAKC,QAAUF,EAAOG,WAAW,MACjCF,KAAKG,UAAYH,KAAKC,QAAQG,gBAAgBJ,KAAKrD,MAAOqD,KAAKjD,QAC/DiD,KAAKK,OAAS,IAAIC,YAAYN,KAAKG,UAAUI,KAAKC,Q,4CAGpD,WACE,OAAOR,KAAKrD,Q,uBAGd,WACE,OAAOqD,KAAKjD,S,sBAGd,SAASN,EAAGC,EAAG+D,GACbT,KAAKK,OAAO5D,EAAIC,EAAIsD,KAAKrD,OAAS8D,I,yBAGpC,WACET,KAAKC,QAAQS,aAAaV,KAAKG,UAAW,EAAG,O,4FCtBpCQ,EAAM,SAACC,EAAKC,EAAOC,GAC9B,OACG,KAAQ,IACC,IAAPA,EAAc,MAAS,IACf,IAARD,EAAe,MAAS,EACnB,IAAND,EAAa,KCLEG,E,WACnB,aAA0C,IAA9BC,EAA6B,uDAAtB,EAAKC,EAAiB,uDAAL,EAAK,oBACvCjB,KAAKgB,KAAOA,EACZhB,KAAKiB,UAAYA,E,2CAGnB,WACE,OAAOjB,KAAKgB,O,qBAGd,SAAQE,GACNlB,KAAKgB,KAAOE,I,0BAGd,WACE,OAAOlB,KAAKiB,Y,0BAGd,SAAaC,GACXlB,KAAKiB,UAAYC,I,mBAGnB,SAAMC,GACJnB,KAAKgB,KAAOG,EAAMC,UAClBpB,KAAKiB,UAAYE,EAAME,iB,8BAGzB,WACE,OAAOrB,KAAKgB,KAAOhB,KAAKgB,KAAOhB,KAAKiB,UAAYjB,KAAKiB,Y,iBAGvD,SAAIE,GACFnB,KAAKgB,MAAQG,EAAMC,UACnBpB,KAAKiB,WAAaE,EAAME,iB,iBAG1B,SAAIF,GACFnB,KAAKgB,MAAQG,EAAMC,UACnBpB,KAAKiB,WAAaE,EAAME,iB,oBAG1B,WACE,IAAMC,EAAUtB,KAAKgB,KAAOhB,KAAKgB,KAAOhB,KAAKiB,UAAYjB,KAAKiB,UACxDM,EAAe,EAAMvB,KAAKgB,KAAOhB,KAAKiB,UAC5CjB,KAAKgB,KAAOM,EACZtB,KAAKiB,UAAYM,M,KC3CfC,EAAc,SAACC,GACnB,IAAMC,EAAc,EAAM,IAAQ,GAAOD,GACnCE,EAAY,EAAM,KAAS,IAAQF,GACnCG,GACH,GAAM,GAAMhF,KAAKiF,IAAiB,GAAZF,EAAmB/E,KAAKkF,GAAM,IAAQJ,EAC/D,OAAOf,EAAIiB,EAAUA,EAAU,GAAiB,GAAXA,ICJjCG,EAAa,IAAIhB,EAEViB,EAAsB,SAACC,EAASC,GAC3CH,EAAWI,MAAMF,GACjB,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACnC,GAAIL,EAAWM,oBAAsB,EACnC,OAAOD,EAETL,EAAWO,SACXP,EAAWQ,IAAIN,GAEjB,OAAQ,GCPJO,EAAgB7B,EAAI,EAAK,EAAK,GAEf7B,E,WACnB,WAAYvC,GAAU,oBACpByD,KAAKzD,QAAUA,EACfyD,KAAKyC,QFFoB,SAACP,GAC5B,IAAMQ,EAAS,GACfA,EAAOC,KAAKhC,EAAI,EAAK,EAAK,IAC1B,IAAK,IAAIyB,EAAI,EAAGA,EAAIF,EAAYE,IAC9BM,EAAOC,KAAKnB,EAAYY,IAG1B,OAAO,SAACX,GACN,OAAOiB,EAAOjB,EAAY,IENXmB,CANA,K,+CASjB,SAAYxF,GAMV,IALA,IAAMyF,EAASzF,EAAKX,EACdqG,EAAS1F,EAAKV,EACdqG,EAAOF,EAASzF,EAAKT,MACrBqG,EAAOF,EAAS1F,EAAKL,OAElBL,EAAIoG,EAAQpG,EAAIsG,EAAMtG,IAC7B,IAAK,IAAID,EAAIoG,EAAQpG,EAAIsG,EAAMtG,IAC7BuD,KAAKzD,QAAQ0G,SAASxG,EAAGC,EAAG8F,K,wBAKlC,SAAWpF,EAAMC,GACf,IAAMwF,EAASzF,EAAKX,EACdqG,EAAS1F,EAAKV,EACdqG,EAAOF,EAASzF,EAAKT,MACrBqG,EAAOF,EAAS1F,EAAKL,OAErBmG,EAAY7F,EAASC,KACrB6F,EAAiB9F,EAASE,IAC1B6F,EAAY/F,EAASV,MAAQS,EAAKT,MAClC0G,EAAiBhG,EAASN,OAASK,EAAKL,OAExCuG,EAAgB,IAAIvC,EAE1BuC,EAAcC,aAAaJ,GAC3B,IAAK,IAAIzG,EAAIoG,EAAQpG,EAAIsG,EAAMtG,IAAK,CAClC4G,EAAcE,QAAQN,GACtB,IAAK,IAAIzG,EAAIoG,EAAQpG,EAAIsG,EAAMtG,IAAK,CAClC,IAAMgH,EAAiBzB,EAAoBsB,EAvChC,KAwCXtD,KAAKzD,QAAQ0G,SAASxG,EAAGC,EAAGsD,KAAKyC,QAAQgB,IACzCH,EAAcE,QAAQF,EAAclC,UAAYgC,GAElDE,EAAcC,aAAaD,EAAcjC,eAAiBgC,M,6BAI9D,WACErD,KAAKzD,QAAQyC,kB,0QClCX0E,EAAc,SAAC,GAMd,IALLC,EAKI,EALJA,QACA9F,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,cACA6F,EACI,EADJA,iBAEA,EAAgCzF,mBAASnC,IAAWG,SAApD,mBAAO0H,EAAP,KAAiBC,EAAjB,KAsBA,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAASrG,UAAW+F,EAAQO,QAA5B,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKxG,UAAW+F,EAAQU,MAA5C,4BAGA,cAACC,EAAA,EAAD,CACE7D,MAAM,UACN8D,KAAK,sCACL/E,OAAO,SACPgF,IAAI,sBAJN,8BAUJ,cAACC,EAAA,EAAD,CAAW7G,UAAW+F,EAAQe,UAAWC,SAAS,KAAlD,SACE,eAACC,EAAA,EAAD,CAAOhH,UAAW+F,EAAQkB,MAAOC,UAAW,EAA5C,UACE,cAACnH,EAAA,EAAD,CACEC,UAAWmH,YACTpB,EAAQqB,cACRnB,IAAa7H,IAAWG,SAAW,SACnC0H,IAAa7H,IAAWI,UAAY,WAEtCO,MAzDS,IA0DTI,OAzDU,IA0DVc,SAAUA,EACVC,SAAUA,EACVC,cAAeA,EACfC,QAlDmB,SAACvB,EAAGC,GAC/B,IAAIuI,EACJ,OAAQpB,GACN,KAAK7H,IAAWG,QACd8I,EAAmC,EAAhBlH,EACnB,MACF,KAAK/B,IAAWI,SACd6I,EAAmBlH,EAAgB,EACnC,MACF,QACEkH,EAAmBlH,EAEnBkH,EAAmB,MACrBxI,GAAK,GACLC,EAAI,EACJuI,EAAmB,KAErBrB,EAAiBnH,EAAGC,EAAGuI,MAmCjB,qBAAKrH,UAAW+F,EAAQuB,QAAxB,SACE,eAACC,EAAA,EAAD,CACEvH,UAAW+F,EAAQyB,YACnB,aAAW,YACXC,KAAK,QACLnE,MAAO2C,EACPyB,WAAS,EACTC,SAAU,SAACC,EAAOC,GAChBA,GAAe3B,EAAY2B,IAP/B,UAUE,cAACC,EAAA,EAAD,CACExE,MAAOlF,IAAWG,QAClBwJ,SAAU9B,IAAa7H,IAAWG,QAClC,aAAW,UAHb,SAKE,cAAC,IAAD,MAEF,cAACuJ,EAAA,EAAD,CACExE,MAAOlF,IAAWI,SAClBuJ,SAAU9B,IAAa7H,IAAWI,SAClC,aAAW,WAHb,SAKE,cAAC,IAAD,oBAiBhBsH,EAAY5D,aAAe,CACzB8D,iBAAkB,cAGLgC,kBAAW,CACxB1B,QAAS,CACP2B,gBAAiB,QACjBpF,MAAO,SAET4D,MAAO,CACLyB,SAAU,GAEZpB,UAAW,CACTqB,UAAW,UAEblB,MAAO,CACLb,SAAU,WACVgC,OAAQ,YACRC,QAAS,QAEXjB,cAAe,CACbrI,MAAO,OACPI,OAAQ,OACR,WAAY,CACVmJ,OAAQ,WAEV,YAAa,CACXA,OAAQ,YAEVL,gBAAiB,SAEnBX,QAAS,CACPlB,SAAU,WACVnE,OAAQ,OACRF,MAAO,QAETyF,YAAa,CACXS,gBAAiB,UAjCND,CAmCZlC,GCvJGyC,EAAqB,WACzB,IAAMC,EAAUC,cACVC,EALC,IAAIC,gBAAgBC,cAAcC,KAAKC,UAAU,IAOlDjK,EAAIkK,OAAOL,EAASM,IAAI,MAAQ,QAChClK,EAAIiK,OAAOL,EAASM,IAAI,MAAQ,KAChCC,EAAMF,OAAOL,EAASM,IAAI,QAAU,OAE1C,OACE,cAAC,EAAD,CACE/I,SAAUpB,EACVqB,SAAUpB,EACVqB,cAAe8I,EACfjD,iBAAkB,SAACkD,EAAMC,EAAMC,GAC7B,IAAMC,EAAOC,mBAAmBJ,GAC1BK,EAAOD,mBAAmBH,GAC1BK,EAASF,mBAAmBF,GAClCZ,EAAQzD,KAAR,aAAmBsE,EAAnB,cAA6BE,EAA7B,gBAAyCC,QAclCC,EARA,WACb,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OC7BNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5988dd13.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nimport Surface from './Graphics/Surface';\nimport Renderer from './Mandelbrot/Renderer';\nimport { useMemo } from 'react';\nimport useAsyncEffect from 'use-async-effect';\n\nexport const ZOOM_MODES = Object.freeze({\n  ZOOM_IN: 'zoom-in',\n  ZOOM_OUT: 'zoom-out',\n});\n\nconst SCAN_AREA_SIZE = 50;\n\nconst yieldProcessing = () => {\n  return new Promise((resolve) => setImmediate(() => resolve()));\n};\n\nconst nextArea = (surface, previous) => {\n  if (!previous) {\n    return {\n      x: 0,\n      y: 0,\n      width: Math.min(SCAN_AREA_SIZE, surface.getWidth()),\n      height: Math.min(SCAN_AREA_SIZE, surface.getHeight()),\n    };\n  }\n\n  let areaX = previous.x + SCAN_AREA_SIZE;\n  let areaY = previous.y;\n  if (areaX >= surface.getWidth()) {\n    areaX = 0;\n    areaY += SCAN_AREA_SIZE;\n  }\n  if (areaY >= surface.getHeight()) {\n    return null;\n  }\n  return {\n    x: areaX,\n    y: areaY,\n    width: Math.min(SCAN_AREA_SIZE, surface.getWidth() - areaX),\n    height: Math.min(SCAN_AREA_SIZE, surface.getHeight() - areaY),\n  };\n};\n\nconst calculateClippedViewport = (surface, area, viewport) => {\n  return {\n    left: viewport.left + viewport.width * (area.x / surface.getWidth()),\n    top: viewport.top + viewport.height * (area.y / surface.getHeight()),\n    width: viewport.width * (area.width / surface.getWidth()),\n    height: viewport.height * (area.height / surface.getHeight()),\n  };\n};\n\nconst prepareArea = (renderer, area) => {\n  renderer.prepareArea(area);\n};\n\nconst renderArea = (renderer, area, viewport) => {\n  renderer.renderArea(area, viewport);\n};\n\nconst Visualization = ({\n  className,\n  width,\n  height,\n  pointerX,\n  pointerY,\n  pixelsPerUnit,\n  onClick,\n}) => {\n  const canvasRef = useRef(null);\n  const [surface, setSurface] = useState(null);\n\n  const unitWidth = width / pixelsPerUnit;\n  const unitHeight = height / pixelsPerUnit;\n\n  const viewport = useMemo(\n    () => ({\n      left: pointerX - unitWidth / 2,\n      top: pointerY - unitHeight / 2,\n      width: unitWidth,\n      height: unitHeight,\n    }),\n    [pointerX, pointerY, unitWidth, unitHeight]\n  );\n\n  useEffect(() => {\n    setSurface(new Surface(canvasRef.current));\n  }, [width, height]);\n\n  useAsyncEffect(\n    async (isMounted) => {\n      if (!surface) {\n        return;\n      }\n\n      const renderer = new Renderer(surface);\n\n      let area = nextArea(surface, null);\n      while (area && isMounted()) {\n        const clippedViewport = calculateClippedViewport(\n          surface,\n          area,\n          viewport\n        );\n        renderArea(renderer, area, clippedViewport);\n\n        area = nextArea(surface, area);\n        if (area) {\n          prepareArea(renderer, area);\n        }\n\n        surface.swapBuffers();\n\n        // Ensure that mouse events get processed.\n        await yieldProcessing();\n      }\n    },\n    [surface, viewport]\n  );\n\n  const handleClick = (e) => {\n    e.preventDefault();\n\n    const rect = e.target.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / (rect.right - rect.left);\n    const y = (e.clientY - rect.top) / (rect.bottom - rect.top);\n\n    onClick(\n      viewport.left + x * viewport.width,\n      viewport.top + y * viewport.height\n    );\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={className}\n      width={width}\n      height={height}\n      onClick={handleClick}\n    />\n  );\n};\n\nVisualization.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  pointerX: PropTypes.number.isRequired,\n  pointerY: PropTypes.number.isRequired,\n  pixelsPerUnit: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n};\n\nVisualization.defaultProps = {\n  onClick: () => {},\n};\n\nexport default Visualization;\n","export default class Surface {\n  constructor(canvas) {\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.context = canvas.getContext('2d');\n    this.imageData = this.context.createImageData(this.width, this.height);\n    this.pixels = new Uint32Array(this.imageData.data.buffer);\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  putPixel(x, y, color) {\n    this.pixels[x + y * this.width] = color;\n  }\n\n  swapBuffers() {\n    this.context.putImageData(this.imageData, 0, 0);\n  }\n}\n","export const rgb = (red, green, blue) => {\n  return (\n    (0xff << 24) |\n    (((blue * 255) & 0xff) << 16) |\n    (((green * 255) & 0xff) << 8) |\n    ((red * 255) & 0xff)\n  );\n};\n","export default class ComplexNumber {\n  constructor(real = 0.0, imaginary = 0.0) {\n    this.real = real;\n    this.imaginary = imaginary;\n  }\n\n  getReal() {\n    return this.real;\n  }\n\n  setReal(value) {\n    this.real = value;\n  }\n\n  getImaginary() {\n    return this.imaginary;\n  }\n\n  setImaginary(value) {\n    this.imaginary = value;\n  }\n\n  setTo(other) {\n    this.real = other.getReal();\n    this.imaginary = other.getImaginary();\n  }\n\n  getLengthSquared() {\n    return this.real * this.real + this.imaginary * this.imaginary;\n  }\n\n  inc(other) {\n    this.real += other.getReal();\n    this.imaginary += other.getImaginary();\n  }\n\n  dec(other) {\n    this.real -= other.getReal();\n    this.imaginary -= other.getImaginary();\n  }\n\n  square() {\n    const newReal = this.real * this.real - this.imaginary * this.imaginary;\n    const newImaginary = 2.0 * this.real * this.imaginary;\n    this.real = newReal;\n    this.imaginary = newImaginary;\n  }\n}\n","import { rgb } from '../Graphics/Color';\n\nconst createColor = (iteration) => {\n  const colorAmount = 1.0 - 30.0 / (30.0 + iteration);\n  const threshold = 1.0 - 250.0 / (250.0 + iteration);\n  const gradient =\n    (0.5 + 0.5 * Math.sin((threshold * 10.0 * Math.PI) / 2.0)) * colorAmount;\n  return rgb(gradient, gradient, 0.3 + gradient * 0.7);\n};\n\nexport const createPalette = (iterations) => {\n  const colors = [];\n  colors.push(rgb(0.0, 0.0, 0.0));\n  for (let i = 0; i < iterations; i++) {\n    colors.push(createColor(i));\n  }\n\n  return (iteration) => {\n    return colors[iteration + 1];\n  };\n};\n","import ComplexNumber from './Complex';\n\n// acts as cache to prevent unnecessary allocations\nconst evaluation = new ComplexNumber();\n\nexport const evalEscapeIteration = (complex, iterations) => {\n  evaluation.setTo(complex);\n  for (let i = 0; i < iterations; i++) {\n    if (evaluation.getLengthSquared() >= 4.0) {\n      return i;\n    }\n    evaluation.square();\n    evaluation.inc(complex);\n  }\n  return -1;\n};\n","import { rgb } from '../Graphics/Color';\n\nimport ComplexNumber from './Complex';\nimport { createPalette } from './Palette';\nimport { evalEscapeIteration } from './Eval';\n\nconst ITERATIONS = 600;\nconst PREPARE_COLOR = rgb(1.0, 1.0, 1.0);\n\nexport default class Renderer {\n  constructor(surface) {\n    this.surface = surface;\n    this.palette = createPalette(ITERATIONS);\n  }\n\n  prepareArea(area) {\n    const startX = area.x;\n    const startY = area.y;\n    const endX = startX + area.width;\n    const endY = startY + area.height;\n\n    for (let y = startY; y < endY; y++) {\n      for (let x = startX; x < endX; x++) {\n        this.surface.putPixel(x, y, PREPARE_COLOR);\n      }\n    }\n  }\n\n  renderArea(area, viewport) {\n    const startX = area.x;\n    const startY = area.y;\n    const endX = startX + area.width;\n    const endY = startY + area.height;\n\n    const startReal = viewport.left;\n    const startImaginary = viewport.top;\n    const deltaReal = viewport.width / area.width;\n    const deltaImabinary = viewport.height / area.height;\n\n    const complexNumber = new ComplexNumber();\n\n    complexNumber.setImaginary(startImaginary);\n    for (let y = startY; y < endY; y++) {\n      complexNumber.setReal(startReal);\n      for (let x = startX; x < endX; x++) {\n        const escapeItration = evalEscapeIteration(complexNumber, ITERATIONS);\n        this.surface.putPixel(x, y, this.palette(escapeItration));\n        complexNumber.setReal(complexNumber.getReal() + deltaReal);\n      }\n      complexNumber.setImaginary(complexNumber.getImaginary() + deltaImabinary);\n    }\n  }\n\n  renderToSurface() {\n    this.surface.swapBuffers();\n  }\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport { withStyles } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\n\nimport Visualization, { ZOOM_MODES } from '../Visualization';\n\nconst CANVAS_WIDTH = 800;\nconst CANVAS_HEIGHT = 600;\n\nconst Application = ({\n  classes,\n  pointerX,\n  pointerY,\n  pixelsPerUnit,\n  onViewportChange,\n}) => {\n  const [zoomMode, setZoomMode] = useState(ZOOM_MODES.ZOOM_IN);\n\n  const onVisualizationClick = (x, y) => {\n    let newPixelsPerUnit;\n    switch (zoomMode) {\n      case ZOOM_MODES.ZOOM_IN:\n        newPixelsPerUnit = pixelsPerUnit * 2;\n        break;\n      case ZOOM_MODES.ZOOM_OUT:\n        newPixelsPerUnit = pixelsPerUnit / 2;\n        break;\n      default:\n        newPixelsPerUnit = pixelsPerUnit;\n    }\n    if (newPixelsPerUnit < 100) {\n      x = -0.5;\n      y = 0.0;\n      newPixelsPerUnit = 100;\n    }\n    onViewportChange(x, y, newPixelsPerUnit);\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Mandelbrot Set\n          </Typography>\n          <Link\n            color=\"inherit\"\n            href=\"http://github.com/mokiat/mandelbrot\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Source Code\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Container className={classes.container} maxWidth=\"md\">\n        <Paper className={classes.paper} elevation={4}>\n          <Visualization\n            className={clsx(\n              classes.visualization,\n              zoomMode === ZOOM_MODES.ZOOM_IN && 'zoomIn',\n              zoomMode === ZOOM_MODES.ZOOM_OUT && 'zoomOut'\n            )}\n            width={CANVAS_WIDTH}\n            height={CANVAS_HEIGHT}\n            pointerX={pointerX}\n            pointerY={pointerY}\n            pixelsPerUnit={pixelsPerUnit}\n            onClick={onVisualizationClick}\n          />\n          <div className={classes.overlay}>\n            <ToggleButtonGroup\n              className={classes.buttonGroup}\n              aria-label=\"zoom mode\"\n              size=\"small\"\n              value={zoomMode}\n              exclusive\n              onChange={(event, newZoomMode) => {\n                newZoomMode && setZoomMode(newZoomMode);\n              }}\n            >\n              <ToggleButton\n                value={ZOOM_MODES.ZOOM_IN}\n                selected={zoomMode === ZOOM_MODES.ZOOM_IN}\n                aria-label=\"zoom in\"\n              >\n                <ZoomInIcon />\n              </ToggleButton>\n              <ToggleButton\n                value={ZOOM_MODES.ZOOM_OUT}\n                selected={zoomMode === ZOOM_MODES.ZOOM_OUT}\n                aria-label=\"zoom out\"\n              >\n                <ZoomOutIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Paper>\n      </Container>\n    </>\n  );\n};\n\nApplication.propTypes = {\n  pointerX: PropTypes.number.isRequired,\n  pointerY: PropTypes.number.isRequired,\n  pixelsPerUnit: PropTypes.number.isRequired,\n  onViewportChange: PropTypes.func,\n};\n\nApplication.defaultProps = {\n  onViewportChange: () => {},\n};\n\nexport default withStyles({\n  toolbar: {\n    backgroundColor: 'white',\n    color: 'black',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  container: {\n    textAlign: 'center',\n  },\n  paper: {\n    position: 'relative',\n    margin: '10px auto',\n    padding: '10px',\n  },\n  visualization: {\n    width: '100%',\n    height: 'auto',\n    '&.zoomIn': {\n      cursor: 'zoom-in',\n    },\n    '&.zoomOut': {\n      cursor: 'zoom-out',\n    },\n    backgroundColor: 'black',\n  },\n  overlay: {\n    position: 'absolute',\n    bottom: '20px',\n    right: '20px',\n  },\n  buttonGroup: {\n    backgroundColor: 'white',\n  },\n})(Application);\n","import React from 'react';\nimport { BrowserRouter, useLocation, useHistory } from 'react-router-dom';\n\nimport Application from '../Application';\n\nconst useFragment = () => {\n  return new URLSearchParams(useLocation().hash.substring(1));\n};\n\nconst ApplicationWrapper = () => {\n  const history = useHistory();\n  const fragment = useFragment();\n\n  const x = Number(fragment.get('x') || '-0.5');\n  const y = Number(fragment.get('y') || '0');\n  const ppu = Number(fragment.get('ppu') || '200');\n\n  return (\n    <Application\n      pointerX={x}\n      pointerY={y}\n      pixelsPerUnit={ppu}\n      onViewportChange={(newX, newY, newPPU) => {\n        const encX = encodeURIComponent(newX);\n        const encY = encodeURIComponent(newY);\n        const encPPU = encodeURIComponent(newPPU);\n        history.push(`#x=${encX}&y=${encY}&ppu=${encPPU}`);\n      }}\n    />\n  );\n};\n\nconst Router = () => {\n  return (\n    <BrowserRouter>\n      <ApplicationWrapper />\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Router from './Router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}